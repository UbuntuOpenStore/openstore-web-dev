#!/usr/bin/env node

'use strict';

const fs = require('fs');

const Package = require('../db').Package;
const Elasticsearch = require('../db/elasticsearch');
const clickParse = require('../utils/click-parser-async');
const helpers = require('../utils/helpers');

Package.find().then((pkgs) => {
    return Promise.all(pkgs.map(async (pkg) => {
        if (pkg.channels.includes(Package.XENIAL)) {
            return;
        }

        let xenialSupport = false;
        let reason = 'None';
        if (pkg.types.length == 1 && (
            pkg.types.includes('webapp') ||
            pkg.types.includes('webapp+')
        )) {
            xenialSupport = true;
            reason = 'webapp';
        }

        if (pkg.manifest && pkg.manifest.hooks && pkg.architectures.includes('all')) {
            let desktopHooks = Object.keys(pkg.manifest.hooks).filter((hook) => {
                return !!pkg.manifest.hooks[hook].desktop;
            });

            if (desktopHooks.length == 1) {
                let desktopHook = pkg.manifest.hooks[desktopHooks[0]].desktop;

                if (desktopHook.exec && desktopHook.exec.startsWith('webapp-container')) { // HTML app
                    xenialSupport = true;
                    reason = 'html app';
                }
                else if (desktopHook.exec && desktopHook.exec.startsWith('qmlscene')) { // Possibly QML only app
                    let filePath = `/tmp/${pkg.id}.click`;
                    let downloadUrl = pkg.revisions.filter((data) => {
                        return (
                            data.revision == pkg.revision &&
                            data.channel == Package.VIVID
                        );
                    });

                    if (downloadUrl.length > 0) {
                        downloadUrl = downloadUrl[0].download_url;

                        try {
                            await helpers.download(downloadUrl, filePath);
                            let parseData = await clickParse(filePath, false);

                            let indicators = parseData.files.filter((file) => {
                                /*
                                    Having a .so or qmldir file means that there
                                    is probably a plugin being used with qmlscene.
                                    And that means it's likely this won't work
                                    with xenial because it's got compiled components.
                                */

                                return (
                                    file.endsWith('qmldir') ||
                                    file.endsWith('.so')
                                );
                            });

                            if (indicators.length === 0) {
                                xenialSupport = true;
                                reason = 'qml only app';
                            }
                        }
                        catch (e) {
                            console.error(e);
                        }

                        try {
                            fs.unlinkSync(filePath);
                        }
                        catch (e) {
                            console.error(e);
                        }
                    }
                }
            }
        }

        if (xenialSupport) {
            console.log(pkg.id, reason);
            pkg.channels.push(Package.XENIAL);

            let revision = pkg.revisions.length + 1;
            pkg.xenial_revision = revision;

            pkg.revisions.push({
                revision: revision,
                version: pkg.version,
                downloads: 0,
                channel: Package.XENIAL,
                download_url: pkg.package,
                download_sha512: pkg.download_sha512,
            });

            await pkg.save();
        }
    }));
}).then(() => {
    console.log('done, update elastic search');
    process.exit(0);
}).catch((err) => {
    console.log(err);
    process.exit(1);
});
