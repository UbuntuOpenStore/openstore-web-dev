---
import ManageAppForm from "@/components/manage/ManageAppForm";
import ManageHeader from "@/components/manage/ManageHeader.astro";
import type { UserData } from "@/lib/schema";
import { AppManageSchema, UserListSchema } from "@/lib/schema";
import ManageError from "./ManageError.astro";

export const prerender = false;

export type Props = {
  id: string;
  user: UserData;
};

const { id, user } = Astro.props;
const apikey = Astro.cookies.get("apikey")!.value;
const appResponse = await fetch(`${import.meta.env.PUBLIC_API_URL}api/v3/manage/${id}?apikey=${apikey}`);

const app = appResponse.status === 200 ? await appResponse.json().then(({ data }) => AppManageSchema.parse(data)) : undefined;

let maintainers: (UserData & { display_name: string })[] = [];
if (user.role === "admin") {
  const maintainersResponse = await fetch(`${import.meta.env.PUBLIC_API_URL}api/users?apikey=${apikey}`);
  const maintainerList = await maintainersResponse.json().then(({ data }) => UserListSchema.parse(data));
  maintainers = maintainerList.map((maintainer) => {
    let name = "UNKNOWN";
    if (maintainer.name && maintainer.email) {
      name = `${maintainer.name} (${maintainer.email})`;
    } else if (maintainer.name && !maintainer.email) {
      name = maintainer.name;
    } else if (!maintainer.name && maintainer.email) {
      name = maintainer.email;
    }

    return {
      ...maintainer,
      display_name: `${name} - ${maintainer.role ?? "community"}`,
    };
  });

  maintainers.sort((a, b) => {
    const aname = a.display_name ? a.display_name.toLowerCase() : "";
    const bname = b.display_name ? b.display_name.toLowerCase() : "";

    if (a.role === "admin" && b.role !== "admin") {
      return -1;
    }
    if (a.role !== "admin" && b.role === "admin") {
      return 1;
    }
    if (aname > bname) {
      return 1;
    }
    if (aname < bname) {
      return -1;
    }

    return 0;
  });
}
---

{app ? (
  <ManageHeader app={app} breadcrumb="Edit" />

  <div class="grow">
    <ManageAppForm user={user} app={app} maintainers={maintainers} client:only="preact" />

    <div class="w-full h-[1px] bg-ubuntu-gradient rounded-full mx-auto max-w-6xl"></div>

    <section class="section space-y-2">
      <h2 class="text-2xl">Package Details</h2>

      <table>
        <tr class="border-b-1 border-b-gray-300">
          <td class="p-2 font-bold">ID</td>
          <td>{app.id}</td>
        </tr>

        <tr class="border-b-1 border-b-gray-300">
          <td class="p-2 font-bold">Publisher</td>
          <td>{app.publisher || "None"}</td>
        </tr>

        {
          app.published_date && (
            <tr class="border-b-1 border-b-gray-300">
              <td class="p-2 font-bold">Published Date</td>
              <td>{new Date(app.published_date).toLocaleString()}</td>
            </tr>
          )
        }

        {
          app.updated_date && (
            <tr class="border-b-1 border-b-gray-300">
              <td class="p-2 font-bold">Updated Date</td>
              <td>{new Date(app.updated_date).toLocaleString()}</td>
            </tr>
          )
        }

        <tr class="border-b-1 border-b-gray-300">
          <td class="p-2 font-bold">{app.architectures.length > 1 ? "Architectures" : "Architecture"}</td>
          <td>{app.architectures.length > 0 ? app.architectures.join(", ") : "None"}</td>
        </tr>

        <tr class="border-b-1 border-b-gray-300">
          <td class="p-2 pr-4 font-bold whitespace-nowrap">Translation Languages</td>
          <td>{app.languages.length > 0 ? app.languages.join(", ") : "None"}</td>
        </tr>
      </table>
    </section>
  </div>
) : (
  <ManageError status={appResponse.status} />
)}
