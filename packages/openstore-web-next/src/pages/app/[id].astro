---
export const prerender = false;

import { AppSchema, ReviewsSchema } from "@/lib/schema";
import { categorySlug } from "@/lib/utils";
import BaseLayout from "@/layouts/BaseLayout.astro";
import CircleIcon from "@/components/CircleIcon.astro";
import DownloadDialog from "@/components/DownloadDialog";
import IconList from "@/components/IconList.astro";
import IconListItem from "@/components/IconListItem.astro";
import Review from "@/components/Review.astro";
import Screenshots from "@/components/Screenshots";

import SvgBuggy from "@/components/icons/Buggy";
import SvgCommunity from "@/components/icons/Community";
import SvgDate from "@/components/icons/Date";
import SvgDevice from "@/components/icons/Device";
import SvgGlobe from "@/components/icons/Globe";
import SvgHappy from "@/components/icons/Happy";
import SvgHeart from "@/components/icons/Heart";
import SvgInfo from "@/components/icons/Info";
import SvgLock from "@/components/icons/Lock";
import SvgNeutral from "@/components/icons/Neutral";
import SvgSave from "@/components/icons/Save";
import SvgSecurityAlert from "@/components/icons/SecurityAlert";
import SvgSource from "@/components/icons/Source";
import SvgThumbsDown from "@/components/icons/ThumbsDown";
import SvgThumbsUp from "@/components/icons/ThumbsUp";
import SvgUser from "@/components/icons/User";
import SvgExternalLink from "@/components/icons/ExternalLink";
import SvgHome from "@/components/icons/Home";
import AppTypeBadges from "@/components/AppTypeBadges";

const { id } = Astro.params;

const [appResponse, reviewsResponse] = await Promise.all([
  fetch(`${import.meta.env.SITE}api/v4/apps/${id}`),
  fetch(`${import.meta.env.SITE}api/v4/apps/${id}/reviews`),
]);

const [{ data: appData }, { data: reviewsData }] = await Promise.all([appResponse.json(), reviewsResponse.json()]);

const app = AppSchema.parse(appData);
const { reviews } = ReviewsSchema.parse(reviewsData);

const PERMISSION_LABELS = {
  accounts: 'Accounts',
  audio: 'Audio',
  bluetooth: 'Bluetooth',
  calendar: 'Calendar',
  camera: 'Camera',
  connectivity: 'Connectivity',
  contacts: 'Contacts',
  content_exchange_source: 'Content Exchange Source',
  content_exchange: 'Content Exchange',
  debug: 'Debug',
  document_files_read: 'Read Document Files',
  document_files: 'Document Files',
  history: 'History',
  'in-app-purchases': 'In App Purchases',
  'keep-display-on': 'Keep Display On',
  location: 'Location',
  microphone: 'Microphone',
  music_files_read: 'Read Music Files',
  music_files: 'Music Files',
  nfc: 'NFC',
  networking: 'Networking',
  picture_files_read: 'Read Picture Files',
  picture_files: 'Picture Files',
  'push-notification-client': 'Push Notifications',
  sensors: 'Sensors',
  usermetrics: 'User Metrics',
  video_files_read: 'Read Video Files',
  video_files: 'Video Files',
  video: 'Video',
  webview: 'Webview',
  unconfined: 'Full System Access',
};

const RESTRICTED_PERMISSIONS = new Set([
  "bluetooth",
  "calendar",
  "contacts",
  "debug",
  "history",
  "music_files",
  "music_files_read",
  "picture_files",
  "picture_files_read",
  "video_files",
  "video_files_read",
  "unconfined",
]);

const dateFormatter = new Intl.DateTimeFormat(undefined, {
  dateStyle: "medium",
});
const numberFormatter = new Intl.NumberFormat();
function domainFormatter(url: string) {
  return new URL(url).host;
}

const hasRestrictedPermissions = app.permissions.some((permission) => RESTRICTED_PERMISSIONS.has(permission)) || app.read_paths.length > 0 || app.write_paths.length > 0;
const isTrustedApp =
  (app.id.startsWith("com.ubuntu.") && !app.id.startsWith("com.ubuntu.developer.")) ||
  app.id.startsWith("com.canonical.") ||
  app.id.startsWith("ubports.") ||
  app.id.startsWith("openstore.");
const isProprietary = app.license.toLowerCase() === "proprietary";

const publisherUrl = new URL('/apps/', import.meta.env.SITE);
publisherUrl.searchParams.append('search', `publisher:${app.publisher}`);
---

<BaseLayout title={app.name} pageTitle={`${app.name} | OpenStore`} description={app.tagline}>
  <section class="section flex">
    <a href="/">
      <SvgHome />
    </a>
    {app.category && (
      <div class="ml-1">/ <a href={`/apps/${categorySlug(app.category)}`} class="underline">{app.category}</a></div>
    )}
  </section>

  <section class="flex flex-col md:flex-row justify-between section">
    <div class="flex flex-row gap-4 max-w-xl mb-4 md:mb-0">
      <div>
        <img class="rounded-2xl" src={app.icon} alt={app.name} width="128" height="128" loading="eager" />
      </div>
      <div>
        <h1 class="text-4xl">{app.name}</h1>
        {app.publisher && (
          <p>
            by <a href={publisherUrl.toString()} class="underline">{app.publisher}</a>
          </p>
        )}

        <AppTypeBadges types={app.types} />

        <p class="mt-4 text-xl">{app.tagline}</p>
      </div>
    </div>

    <div class="flex gap-4 items-center">
      <a href={`openstore://${app.id}`} title="Install via the OpenStore app" class="btn w-full bg-ubuntu-orange text-white font-bold"
        >Install</a
      >

      <DownloadDialog app={app} client:load />
    </div>
  </section>

  <section class="section flex justify-center">
    <ul class="flex gap-4">
      <li class="flex gap-2">
        <SvgThumbsUp />
        {app.ratings.THUMBS_UP}
      </li>
      <li class="flex gap-2">
        <SvgHappy />
        {app.ratings.HAPPY}
      </li>
      <li class="flex gap-2">
        <SvgNeutral />
        {app.ratings.NEUTRAL}
      </li>
      <li class="flex gap-2">
        <SvgThumbsDown />
        {app.ratings.THUMBS_DOWN}
      </li>
      <li class="flex gap-2">
        <SvgBuggy />
        {app.ratings.BUGGY}
      </li>
    </ul>
  </section>

  <div class="mx-auto w-full max-w-6xl h-1 bg-ubuntu-gradient rounded-full"></div>

  <section class="section">
    <Screenshots images={app.screenshots} videoUrl={app.video_url} nsfw={app.nsfw} client:idle />
  </section>

  <section class="section">
    <h2 class="text-xl text-center mb-4">About {app.name}</h2>
    <p>
      {
        app.description.split("\n").map((line) => (
          <>
            {line} <br />
          </>
        ))
      }
    </p>
  </section>

  <div class="mx-auto w-full max-w-6xl h-1 bg-ubuntu-gradient rounded-full"></div>

  <section class="section">
    <h2 class="text-xl text-center mb-4">Recent Changes</h2>
    <p class="max-h-64 overflow-y-auto">
      {
        app.changelog.split("\n").map((line) => (
          <>
            {line} <br />
          </>
        ))
      }
    </p>
  </section>

  <section class="section flex flex-col md:flex-row gap-4 items-stretch">
    <div class="card">
      <h2 class="text-xl text-center mb-4">Permissions</h2>

      {
        hasRestrictedPermissions && !isTrustedApp ? (
          <CircleIcon outerClass="bg-yellow-500/70 mb-4" innerClass="bg-yellow-200">
            <SvgSecurityAlert />
          </CircleIcon>
        ) : (
          <CircleIcon outerClass="bg-green-500/70 mb-4" innerClass="bg-green-200">
            <SvgLock />
          </CircleIcon>
        )
      }

      <ul>
        {app.permissions.map((permission) => (
          <li class={`${RESTRICTED_PERMISSIONS.has(permission) ? 'text-red-700' : ''}`}>
            {PERMISSION_LABELS[permission as keyof typeof PERMISSION_LABELS]}
          </li>
        ))}

        {app.write_paths.map((path) => (
          <li class="text-red-700">
            Unrestricted write access to: {path}
          </li>
        ))}

        {app.read_paths.map((path) => (
          <li class="text-red-700">
            Unrestricted read access to: {path}
          </li>
        ))}
      </ul>

      {app.permissions.length === 0 && app.read_paths.length === 0 && app.write_paths.length && (
        <p class="text-center">No permissions needed</p>
      )}
    </div>

    <div class="card">
      {
        isProprietary ? (
          <>
            <h2 class="text-xl text-center mb-4">Proprietary</h2>

            <CircleIcon outerClass="bg-yellow-500/70 mb-4" innerClass="bg-yellow-200">
              <SvgInfo />
            </CircleIcon>

            <p>
              This app's source code is not available and has not been reviewed by the community. There is no accountability for what this
              app does or how it is developed. Please install at your own risk
            </p>
          </>
        ) : (
          <>
            <h2 class="text-xl text-center mb-4">Community Built</h2>

            <CircleIcon outerClass="bg-green-500/70 mb-4" innerClass="bg-green-200">
              <SvgCommunity />
            </CircleIcon>

            <p>
              This app has been released under the {app.license} license.
              {app.source && <>It is developed in the open and you can review the source code.</>}
            </p>

            <div class="text-center">
              {app.source && (
                <a href={app.source} class="underline">Get involved</a>
                <a href={app.source} class="inline-block -mb-1">
                  <SvgExternalLink />
                </a>
              )}
            </div>
          </>
        )
      }
    </div>
  </section>

  <section class="section flex flex-col md:flex-row gap-4 items-stretch">
    <IconList
      title="Info"
    >
        <IconListItem label="Published Date" value={dateFormatter.format(app.published_date)}>
          <SvgDate />
        </IconListItem>

        <IconListItem label="Updated Date" value={dateFormatter.format(app.updated_date)}>
          <SvgDate />
        </IconListItem>

        <IconListItem label="Total Downloads" value={numberFormatter.format(app.totalDownloads)}>
          <SvgSave />
        </IconListItem>

        <IconListItem label="Latest Version Downloads" value={numberFormatter.format(app.latestDownloads)}>
          <SvgSave />
        </IconListItem>

        <IconListItem label="Supported Architectures" value={app.architectures.join(", ")}>
          <SvgDevice />
        </IconListItem>

        <IconListItem label="Translation Languages" value={app.languages.join(", ")}>
          <SvgGlobe />
        </IconListItem>
    </IconList>

    <IconList
      title="Links"
    >
        {app.source && (
          <IconListItem label="Source Code" value={`<a href="${app.source}" class="underline">${domainFormatter(app.source)}</a>`}>
            <SvgSource />
          </IconListItem>
          )
        }

        {app.support_url && (
          <IconListItem label="Support" value={`<a href="${app.support_url}" class="underline">${domainFormatter(app.support_url)}</a>`}>
            <SvgUser />
          </IconListItem>
          )
        }

        {app.donate_url && (
          <IconListItem label="Donate" value={`<a href="${app.donate_url}" class="underline">${domainFormatter(app.donate_url)}</a>`}>
            <SvgHeart />
          </IconListItem>
          )
        }

        {app.translation_url && (
          <IconListItem label="Translations" value={`<a href="${app.translation_url}" class="underline">${domainFormatter(app.translation_url)}</a>`}>
            <SvgGlobe />
          </IconListItem>
          )
        }
    </IconList>
  </section>

  <section class="section flex flex-col gap-4 items-stretch">
    <h2 class="text-xl text-center mb-4">Reviews</h2>

    {
      reviews.length > 0 ? (
        <>
          {reviews.map((review, index) => (
            <div>
              <Review review={review} />

              {index < reviews.length - 1 && <div class="w-full h-[1px] bg-ubuntu-gradient rounded-full" />}
            </div>
          ))}
        </>
      ) : (
        <p class="text-center">No reviews yet!</p>
      )
    }
  </section>
</BaseLayout>
