---
import ManageAppForm from "@/components/manage/ManageAppForm";
import ManageHeader from "@/components/manage/ManageHeader.astro";
import BaseLayout from "@/layouts/BaseLayout.astro";
import type { UserData } from "@/lib/schema";
import { AppManageSchema, UserListSchema, UserSchema } from "@/lib/schema";

export const prerender = false;

const { id } = Astro.params;
const apikey = Astro.cookies.get("apikey")?.value;
if (!apikey) {
  return Astro.redirect("/login/");
}

const [userResponse, appResponse] = await Promise.all([
  // TODO cache this
  fetch(`${import.meta.env.PUBLIC_API_URL}api/users/me?apikey=${apikey}`),

  fetch(`${import.meta.env.PUBLIC_API_URL}api/v3/manage/${id}?apikey=${apikey}`),
]);

if (appResponse.status === 404) {
  return new Response(null, {
    status: 404,
    statusText: "Not found",
  });
}

if (appResponse.status === 403) {
  return Astro.redirect("/manage/");
}

if (userResponse.status !== 200 || appResponse.status !== 200) {
  Astro.cookies.delete("apikey");
  return Astro.redirect("/login/");
}

const user = await userResponse.json().then(({ data }) => UserSchema.parse(data));
const app = await appResponse.json().then(({ data }) => AppManageSchema.parse(data));

let maintainers: (UserData & { display_name: string })[] = [];
if (user.role === "admin") {
  const maintainersResponse = await fetch(`${import.meta.env.PUBLIC_API_URL}api/users?apikey=${apikey}`);
  const maintainerList = await maintainersResponse.json().then(({ data }) => UserListSchema.parse(data));
  maintainers = maintainerList.map((maintainer) => {
    let name = "UNKNOWN";
    if (maintainer.name && maintainer.email) {
      name = `${maintainer.name} (${maintainer.email})`;
    } else if (maintainer.name && !maintainer.email) {
      name = maintainer.name;
    } else if (!maintainer.name && maintainer.email) {
      name = maintainer.email;
    }

    return {
      ...maintainer,
      display_name: `${name} - ${maintainer.role ?? "community"}`,
    };
  });

  maintainers.sort((a, b) => {
    const aname = a.display_name ? a.display_name.toLowerCase() : "";
    const bname = b.display_name ? b.display_name.toLowerCase() : "";

    if (a.role === "admin" && b.role !== "admin") {
      return -1;
    }
    if (a.role !== "admin" && b.role === "admin") {
      return 1;
    }
    if (aname > bname) {
      return 1;
    }
    if (aname < bname) {
      return -1;
    }

    return 0;
  });
}
---

<BaseLayout title="OpenStore" pageTitle={`Manage ${app.name} | OpenStore`} description={app.tagline}>
  <ManageHeader app={app} breadcrumb="Edit" />

  <ManageAppForm user={user} app={app} maintainers={maintainers} client:only="preact" />

  <div class="w-full h-[1px] bg-ubuntu-gradient rounded-full mx-auto max-w-6xl"></div>

  <section class="section space-y-2">
    <h2 class="text-2xl">Package Details</h2>

    <table>
      <tr class="border-b-1 border-b-gray-300">
        <td class="p-2 font-bold">ID</td>
        <td>{app.id}</td>
      </tr>

      <tr class="border-b-1 border-b-gray-300">
        <td class="p-2 font-bold">Publisher</td>
        <td>{app.publisher ?? "None"}</td>
      </tr>

      <tr class="border-b-1 border-b-gray-300">
        <td class="p-2 font-bold">Published Date</td>
        <td>{new Date(app.published_date).toLocaleString()}</td>
      </tr>

      <tr class="border-b-1 border-b-gray-300">
        <td class="p-2 font-bold">Updated Date</td>
        <td>{new Date(app.updated_date).toLocaleString()}</td>
      </tr>

      <tr class="border-b-1 border-b-gray-300">
        <td class="p-2 font-bold">{app.architectures.length > 1 ? "Architectures" : "Architecture"}</td>
        <td>{app.architectures.join(", ")}</td>
      </tr>

      <tr class="border-b-1 border-b-gray-300">
        <td class="p-2 pr-4 font-bold whitespace-nowrap">Translation Languages</td>
        <td>{app.languages.length > 0 ? app.languages.join(", ") : 'None'}</td>
      </tr>
    </table>
  </section>
</BaseLayout>
